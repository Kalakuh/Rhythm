package kalakuh.rhythm
{
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.utils.Timer;
	import flash.utils.getTimer;
	
	// for the Kongregate API
	import flash.display.LoaderInfo;
	import flash.display.Loader;
	import flash.net.URLRequest;
	import flash.system.Security;
	import flash.net.SharedObject;
	
	/**
	 * ...
	 * @author Kalakuh
	 */
	
	// Preloader
	[Frame(factoryClass="kalakuh.rhythm.Preloader")]
	
	public class Main extends Sprite
	{ 
		// Music
		// Menu - TimeToDream.mp3
		// 1 - DatBeat.mp3
		// 2 - SynthScape.mp3
		// 3 - ElectroRock.mp3
		// 4 - ImpureTechnology.mp3
		// ...
		
		// Saving
		private var _saving : SharedObject = SharedObject.getLocal("data");
		
		// Musics - initialize
		private var channel : SoundChannel = new SoundChannel();
		
		[Embed(source="../Assets/DatBeat.mp3")]private var song1 : Class;
		private var l1song : Sound = new song1();
		[Embed(source="../Assets/SynthScape.mp3")]private var song2 : Class;
		private var l2song : Sound = new song2();
		[Embed(source="../Assets/ElectroRock.mp3")]private var song3 : Class;
		private var l3song : Sound = new song3();
		[Embed(source="../Assets/ImpureTechnology.mp3")]private var song4 : Class;
		private var l4song : Sound = new song4();
		[Embed(source="../Assets/TimeToDream.mp3")]private var songmenu : Class;
		private var menusong : Sound = new songmenu();
		
		// Menu
		private var _menu1 : MenuLogic;
		private var _menu2 : MenuLogic;
		private var _menu3 : MenuLogic;
		private var _menu4 : MenuLogic;
		
		// Recording
		private var _levelCode : String = "";
		// starting time of recording
		private var startRecord : Number;
		
		private var _logo : Logo = new Logo();
		public static var $levelCount : uint = 4;
		public static var $level : uint = 1;
		public static var $mode : String = "Logo";
		private var hazardManager : HazardManager = new HazardManager();
		private var player : Player;
		// private var instruction : Instructions;
		private var _p : Boolean = false;
		private var _h : Hazard;
		private var _time : Timer;
		private var completedLevels : Array = new Array();
		
		// Kongregate
		public var kongregate : *;
		
		// *************************** DATA *************************** //
		private const dat1 : Array = new Array(1175, 1463, 1791, 1983, 2191, 2583, 2847, 3007, 3247, 3619, 3819, 4095, 4551, 4759, 4975, 5303, 5607, 5819, 6095, 6559, 6743, 6903, 7095, 7375, 7951, 8543, 8727, 9073, 9275, 9479, 9759, 9943, 10359, 10631, 10879, 11263, 11887, 12319, 12551, 12927, 13343, 13573, 13819, 14223, 14496, 14664, 14928, 15104, 15375, 15719, 16075, 16441, 16842, 17056, 17256, 17664, 17991, 18319, 18791, 18973, 19175, 19552, 19944, 20223, 20583, 20944, 21176, 21576, 21919, 22241, 22560, 22800, 22958, 23104, 23430, 23608, 23840, 24020, 24574, 24774, 24982, 25399, 25655, 25823, 26095, 26519, 26695, 26902, 27264, 27480, 27696, 28055, 28487, 28663, 28863, 29242, 29584, 29975, 30419, 30591, 30775, 31175, 31559, 31903, 32342, 32520, 32742, 33152, 33504, 33863, 34247, 34441, 34642, 35064, 35442, 35800, 36160, 36392, 36607, 37048, 37360, 37656, 37991, 38247, 38423, 38619, 38879, 39519, 39663, 39831, 40023, 40407, 40847, 41007, 41575, 41743, 41903, 42056, 42278, 42551, 42864, 43462, 43646, 43830, 44174, 44631, 44863, 45360, 45576, 45776, 45983, 46528, 46752, 47384, 47576, 47752, 47960, 48456, 48642, 49232, 49424, 49719, 49903, 50088, 50351, 51207, 51407, 51608, 51919, 52431, 52760, 53191, 53391, 53607, 53856, 54200, 54687, 55232, 55424, 55655, 55903, 56592, 56800, 57295, 57487, 57696, 57920, 58207, 58583, 58775, 59248, 59420, 59664, 59941, 60127, 60463, 60703, 61218, 61422, 61631, 61847, 62247, 62479, 62676, 63120, 63320, 63527, 63775, 64199, 64391, 64591, 65063, 65255, 65480, 65720, 66072, 66391, 66599, 66992, 67174, 67392, 67584, 67792, 68176, 68352, 68560, 68751, 69119, 69341, 69583, 69960, 70620, 70808, 71407, 71696, 71952, 72479, 72800, 72984, 73172, 73544, 73784, 74391, 74583, 74791, 75184, 75655, 76351, 76551, 76791, 77343, 77663, 78374, 78550, 78775, 79351, 80255, 80431, 80608, 80976, 81184, 81442, 81688, 82263, 82447, 82631, 82855, 83351, 84076, 84280, 84519, 84841, 85375, 85656, 85952, 86199, 86848, 87400, 87584, 87808, 88243, 88656, 88856, 89288, 89573, 89974, 90448, 90676, 91199, 91620, 91973, 92420, 92584, 93064, 93479, 93744, 94288, 94488, 94720, 95127, 95559, 95847, 96358, 96542, 96982, 97424, 97743, 98152, 98352, 98927, 99255, 99655, 100143, 100474, 100887, 101304, 101576, 101784, 101944, 102184, 102558, 102862, 103064, 103504, 103680, 103856, 104032, 104218, 104640, 105376, 105680, 105880, 106128, 106608, 107352, 107576, 107776, 107984, 108476, 109248, 109424, 109592, 109774, 109976, 110192, 110688, 111320, 111504, 111680, 111864, 112080, 112592, 113222, 113400, 113592, 113782, 114018, 114494, 115191, 115383, 115592, 116232, 116496, 116760, 117032, 117320, 117752, 118208, 118448, 118904, 119096, 119256, 119442, 119632, 119842, 120384, 120940, 121140, 121320, 121518, 121728, 121984, 122848, 123042, 123232, 123442, 123927, 124241, 124759, 124943, 125127, 125295, 125519, 126095, 126675, 126875, 127063, 127255, 127439, 127695, 128119, 128679, 128863, 129047, 129247, 129475, 129919, 130119, 130631, 130831, 131031, 131255, 131599, 132032, 132384, 132744, 133032, 133232, 133488, 133688, 134040, 134248, 134456, 134800, 135000, 135232, 135442, 135642, 135976, 136184, 136374, 136740, 136920, 137128, 137320, 137576, 137928, 138142, 138328, 138656, 138832, 139032, 139242, 139400, 139824, 140020, 140220, 140608, 140792, 141023, 141255, 141443, 141784, 141976, 142184, 142544, 142728, 142903, 143103, 143303, 143655, 143847, 144041, 144443, 144619, 144879, 145263, 145703, 145895, 146119, 146447, 146655, 146875, 147079);
		private const dat2 : Array = new Array(532, 869, 1231, 1589, 2005, 2405, 2813, 3245, 3701, 4133, 4569, 5013, 5436, 5844, 6252, 6636, 7052, 7298, 7804, 8332, 8788, 9244, 9717, 10149, 10571, 11013, 11437, 11822, 12246, 12638, 13118, 13606, 14000, 14190, 14390, 14604, 14918, 15132, 15348, 15732, 15956, 16212, 16470, 17004, 17468, 17700, 17868, 18068, 18332, 18541, 18733, 19221, 19685, 20099, 20497, 20877, 21069, 21269, 21509, 21731, 22005, 22189, 22541, 22908, 23420, 23898, 24252, 24444, 24668, 24900, 25284, 25444, 25644, 26052, 26484, 26860, 27221, 27621, 27861, 28085, 28453, 28645, 28831, 29031, 29405, 29789, 29989, 30181, 30357, 30533, 30699, 31101, 31301, 31501, 31669, 31831, 32013, 32201, 32381, 32733, 32931, 33101, 33285, 33453, 33653, 33821, 34005, 34201, 34601, 34837, 35021, 35213, 35389, 35581, 35805, 36077, 36331, 36517, 36709, 36877, 37069, 37245, 37445, 37877, 38099, 38277, 38477, 38637, 38877, 39069, 39276, 39598, 39780, 39968, 40172, 40372, 40556, 40740, 40972, 41388, 41600, 41800, 41972, 42356, 42532, 42708, 42916, 43244, 43412, 43600, 43940, 44132, 44316, 44789, 45001, 45213, 45573, 45781, 46001, 46401, 46598, 46790, 47034, 47370, 47574, 47814, 48190, 48414, 48602, 48800, 49158, 49350, 49568, 49832, 50102, 50300, 50534, 50742, 51012, 51252, 51500, 51772, 51971, 52189, 52401, 52652, 52900, 53300, 53518, 53741, 54005, 54221, 55109, 55571, 56733, 57621, 58085, 58477, 58645, 58852, 59676, 60068, 61698, 61908, 62181, 62421, 62885, 63309, 63717, 64141, 64573, 64941, 65369, 65589, 66285, 66477, 66685, 67077, 67605, 68031, 68453, 68814, 69014, 69268, 70032, 70534, 71508, 71732, 71957, 72198, 72445, 72917, 73269, 73671, 73885, 74101, 74341, 74557, 74789, 74999, 75245, 75599, 75868, 76097, 76332, 76548, 76748, 76972, 77220, 77444, 77668, 77884, 78108, 78340, 78530, 78748, 79098, 79300, 79517, 79702, 79909, 80149, 80421, 80653, 80861, 81085, 81333, 81613, 82149, 82437, 82621, 82861, 83077, 83854, 84134, 84390, 84949, 85233, 85510, 85902, 86100, 86286, 86516, 86732, 86934, 87148, 87370, 87605, 87835, 88034, 88268, 88444, 88669, 88877, 89099, 89301, 89517, 89757, 89989, 90432, 90698, 90902, 91188, 91636, 91980, 92220, 92432, 92804, 93445, 93885, 94156, 94372, 94813, 95045, 95341, 95634, 95876, 96099, 96340, 96548, 96773, 96989, 97973, 98221, 98422, 98654, 98870, 99102, 99310, 99790, 99970, 100181, 100399, 100685, 100933, 101141, 101469, 101669, 101909, 102117);
		private const dat3 : Array = new Array(521, 815, 1206, 1598, 2006, 2406, 2798, 3222, 3662, 4078, 4478, 4854, 5254, 5654, 5822, 5990, 6178, 6644, 7094, 7478, 7922, 8294, 8703, 9077, 9487, 9945, 10447, 10903, 11335, 11783, 12183, 12559, 12759, 12911, 13095, 13503, 13927, 14345, 14767, 15183, 15599, 15999, 16391, 16815, 17255, 17703, 18103, 18525, 18975, 19523, 19703, 19879, 20311, 20735, 21151, 21599, 21957, 22407, 22807, 23277, 24655, 25055, 25487, 25895, 26256, 26416, 26584, 26752, 26936, 27328, 27704, 28112, 28384, 28912, 29360, 29816, 30244, 30656, 31104, 31578, 32024, 32832, 33192, 33560, 33992, 34432, 34952, 35392, 35846, 36244, 36630, 37022, 37462, 37902, 38326, 38758, 39182, 39630, 40062, 40494, 40878, 41326, 41578, 41766, 41950, 42150, 42344, 42558, 42790, 43054, 43246, 43454, 43655, 43911, 44087, 44279, 44479, 44815, 45167, 45545, 45751, 45951, 46179, 46527, 46711, 46903, 47087, 47359, 47551, 47751, 47935, 48279, 48645, 49015, 49345, 49807, 50245, 50663, 50845, 51023, 51223, 51407, 51679, 52123, 52551, 52935, 53303, 53695, 54095, 54279, 54487, 54655, 54855, 55123, 55647, 56327, 56723, 57321, 57479, 57679, 57877, 58121, 58543, 59127, 59303, 60159, 60577, 60999, 61424, 61896, 62504, 62664, 62856, 63104, 63644, 63844, 64152, 64336, 64522, 64680, 64872, 65352, 65944, 66144, 66312, 66464, 66656, 67032, 67264, 67632, 67952, 68384, 68792, 69206, 69616, 69886, 70296, 71184, 71688, 72160, 72590, 73022, 73422, 73830, 74278, 74478, 74646, 74822, 75206, 75646, 76062, 76454, 76934, 77344, 77822, 78254, 78679, 79079, 79463, 79895, 80323, 80723, 81167, 81351, 81545, 81750, 82103, 82545, 82967, 83383, 83807, 84199, 84471, 84911, 85367, 85845, 86279, 86745, 87177, 87631, 87845, 88023, 88245, 88463, 88647, 88863, 89311, 89711, 90135, 90645, 91043, 91479, 91877, 92263, 92751, 92945, 93191, 93407, 93591, 94055, 94535, 94959, 95351, 95745, 96180, 96644, 97064, 97456, 97946, 98360, 98760, 99160, 99616, 100056, 100464, 100856, 101304, 101712, 102064, 102448, 102936, 103424, 103880, 104324, 104744, 105200, 105580, 105984, 106456, 106888, 107304, 107608, 108096, 108534, 108734, 108912, 109096, 109510, 109990, 110446, 110862, 111222, 111598, 112014, 112446, 112862, 113286, 113695, 114145, 114581, 115015, 115407, 115591, 115759, 115911, 116095, 116271, 116455, 116823, 117263, 117591, 118031, 118455, 118847, 119231, 119671, 120127, 120547, 120959, 121391, 121855, 122296, 122602, 122792, 122968, 123616, 124096, 124494, 124946, 125368, 125782, 126206, 126566, 126998, 127310, 127798, 128254, 128674, 129102, 129590, 130046, 130454, 130902, 131311, 131759, 132127, 132521, 132807, 133207, 133591, 134032, 134416, 134848, 135250, 135664, 136088, 136504, 136704, 136896, 137122, 137728, 138145, 138599, 139071, 139523, 139871, 140167, 140703, 140887, 141087, 141271, 141471, 142023, 142471, 142895, 143327, 143711, 143927, 144135, 144623, 145047, 145487, 145903, 146287, 146471, 146663, 146847, 147280, 147726, 148120, 148523, 148903, 149327, 149791, 149983, 150179, 150359, 150527, 150703, 150871, 151103, 151615, 152047, 152487, 152919, 153311, 153687, 154095, 154523, 154903, 155351, 155767, 156167, 156567, 156779, 156951, 157121, 157287, 157503);
		private const dat4 : Array = new Array(730, 1028, 1248, 1480, 1904, 2104, 2292, 2497, 2713, 2953, 3169, 3627, 4069, 4241, 4441, 4649, 4869, 5353, 5761, 6027, 6209, 6401, 6615, 6984, 7495, 7695, 7871, 8047, 8247, 8447, 8831, 9227, 9409, 9593, 9775, 9965, 10151, 10448, 10896, 11194, 11376, 11538, 11704, 11880, 12208, 12601, 12995, 13169, 13345, 13553, 13977, 14353, 14673, 14857, 15033, 15241, 15577, 15937, 16257, 16496, 16760, 16984, 17248, 17384, 17785, 18130, 18528, 18712, 18976, 19479, 20368, 20736, 21040, 21256, 21576, 22092, 22448, 22648, 22832, 23032, 23248, 23728, 23928, 24184, 24400, 24584, 24794, 25008, 25368, 25648, 25872, 26112, 26296, 26512, 26736, 27048, 27632, 28041, 28481, 28893, 29337, 29769, 30185, 30601, 31073, 31325, 31513, 31753, 32209, 32691, 33128, 33568, 33968, 34468, 34832, 35248, 35744, 36168, 36368, 36568, 36768, 37040, 37526, 37945, 38169, 38384, 38616, 38849, 39081, 39600, 39828, 40026, 40228, 40428, 40657, 40961, 41369, 41817, 42193, 42457, 42693, 43112, 43494, 43800, 44000, 44184, 44668, 44856, 45094, 45281, 45617, 45809, 46027, 46495, 46873, 47195, 47369, 47537, 47753, 48177, 48577, 48937, 49153, 49305, 49480, 49896, 50201, 50601, 50777, 50937, 51153, 51353, 51669, 51928, 52304, 52504, 52680, 52848, 53048, 53345, 53713, 54067, 54249, 54433, 54626, 54848, 55092, 55468, 55776, 55976, 56168, 56368, 56568, 56817, 57113, 57448, 57641, 57825, 57993, 58209, 58429, 58745, 58945, 59328, 59528, 59704, 59936, 60229, 60457, 60891, 61091, 61271, 61472, 61694, 61929, 62279, 62565, 62834, 63068, 63268, 63492, 63768, 64017, 64336, 64536, 64712, 64938, 65368, 65584, 65808, 66272, 66440, 66616, 66832, 67080, 67304, 67494, 67728, 67968, 68208, 68408, 68784, 69128, 69492, 69944, 70353, 70657, 70841, 71017, 71229, 71417, 71827, 72227, 72429, 72608, 72784, 73000, 73568, 73994, 74184, 74384, 74568, 74977, 75273, 75537, 75796, 76056, 76796, 77353, 77793, 78232, 78666, 79048, 79467, 79896, 80298, 80738, 81208, 81568, 82008, 82429, 82856, 83292, 83784, 84232, 84680, 85128, 85496, 85904, 86272, 86669, 87129, 87512, 87984, 88432, 88952, 89368, 89552, 89768, 89976, 90200, 90408, 90760, 91029, 91267, 91471, 91728, 91944, 92160, 92401, 92760, 92944, 93152, 93368, 93595, 93801, 94305, 94513, 94729, 94927, 95153, 95345, 96009, 96217, 96433, 96629, 96801, 97009, 97217, 97769, 97969, 98153, 98337, 98529, 98737, 98929, 99594, 99800, 99984, 100184, 100384, 100600, 101145, 101353, 101544, 101744, 101944, 102144, 102366, 102896, 103128, 103329, 103529, 103745, 103945, 104521, 104713, 104929, 105129, 105337, 105513, 105729, 106297, 106521, 106721, 106936, 107136, 107352, 107641, 108121, 108329, 108545, 108761, 108961, 109184, 109720, 109936, 110128, 110328, 110528, 110704, 110912, 111480, 111680, 111872, 112072, 112295, 112473, 112721, 113248, 113440, 113656, 113872, 114048, 114257, 114469, 114928, 115168, 115369, 115585, 115801, 116001, 116201, 116705, 116930, 117232, 117448, 117695, 118231, 118417, 118629, 118817, 119029, 119232, 119456, 119657, 120185, 120377, 120609, 120795, 121017, 121241, 121520, 121928, 122120, 122345, 122537, 122736, 122944, 123216, 123609, 123817, 124016, 124228, 124417, 124630, 124828, 125297, 125505, 125713, 125912, 126136, 126344, 126552, 127008, 127230, 127426, 127649, 127849, 128048, 128353, 128745, 128945, 129160, 129368, 129594, 129808, 130001, 130521, 130785, 131226, 131994, 132696, 133168, 133873, 134433, 134977, 135630, 136153, 136577, 137073, 137495, 137969, 138441, 139029, 139529, 139960, 140321, 140713, 141169, 141561, 141769, 142336, 142608, 142830, 143094, 143528, 144120, 144468, 144848, 145368, 145816, 146273, 146713, 147113, 147577, 148030, 148468, 148872, 149344, 149752, 150195, 150629, 151069, 151345, 151669, 152001, 152681, 152897, 153113, 153457, 153657, 154312, 154532, 154752, 154953, 155166, 155368, 155577, 156113, 156329, 156537, 156752, 156944, 157161, 157361, 157537, 157985, 158377, 158795, 159217, 159628, 159984, 160408, 160762, 161033, 161330, 161776, 162033, 162248, 162953, 163169, 163377, 163569, 163777, 163994, 164176, 164704, 164904, 165104, 165313, 165497, 165697, 166353, 166531, 166705, 166913, 167094, 167296, 167568, 168068, 168258, 168442, 168650, 168849, 169033, 169681, 169921, 170113, 170313, 170530, 170730, 170944, 171296, 171720);
		
		private var _i : uint = 0;
		
		public function Main():void 
		{
			if (stage) init();
			else addEventListener(Event.ADDED_TO_STAGE, init);
			
		}
		
		private function load () : void {
			if (_saving.data.deaths == null) {
				_saving.data.deaths = 0;
			}
			if (_saving.data.first == null) {
				_saving.data.first = false;
			}
			if (_saving.data.second == null) {
				_saving.data.second = false;
			}
			if (_saving.data.third == null) {
				_saving.data.third = false;
			}
			if (_saving.data.fourth == null) {
				_saving.data.fourth = false;
			}
			if (_saving.data.first) {
				completedLevels.push(1)
			}
			if (_saving.data.second) {
				completedLevels.push(2)
			}
			if (_saving.data.third) {
				completedLevels.push(3)
			}
			if (_saving.data.fourth) {
				completedLevels.push(4)
			}
			_saving.flush();
		}
		
		private function begin () : void {
			/*instruction = new Instructions();
			addChild(instruction);*/
			_logo = null;
			player = new Player();
			addChild(player);
			_time = new Timer((Math.random() * 1) * 1000, 1);
			_time.addEventListener(TimerEvent.TIMER, timerAction);
			_time.start();
			// Menu
			_menu1 = new MenuLogic(this, 1);
			addChild(_menu1);
			_menu2 = new MenuLogic(this, 2);
			addChild(_menu2);
			_menu3 = new MenuLogic(this, 3);
			addChild(_menu3);
			_menu4 = new MenuLogic(this, 4);
			addChild(_menu4);
			channel = menusong.play();
			channel.addEventListener(Event.SOUND_COMPLETE, replay);
		}
		
		private function record(e : MouseEvent) : void {
			if ($mode == "Game") {
				_levelCode += ((String)(getTimer() - startRecord)) + ", ";
				trace(_levelCode);
			}
		}
		
		private function init(e:Event = null):void 
		{			
			// We don't want to record now
			// stage.addEventListener(MouseEvent.CLICK, record);
			
			removeEventListener(Event.ADDED_TO_STAGE, init);
			
			// loading
			load();
			
			// Kongregate
			var paramObj:Object = LoaderInfo(root.loaderInfo).parameters;
         
			 // The API path. The "shadow" API will load if testing locally. 
			 var apiPath:String = paramObj.kongregate_api_path || 
			   "http://www.kongregate.com/flash/API_AS3_Local.swf";
			 
			 // Allow the API access to this SWF
			 Security.allowDomain(apiPath);
			 
			 // Load the API
			 var request:URLRequest = new URLRequest(apiPath);
			 var loader:Loader = new Loader();
			 loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete);
			 loader.load(request);
			 this.addChild(loader);
			
			addChild(_logo);
			addEventListener(Event.ENTER_FRAME, frameUpdate);
		}
		
		private function loadComplete(event:Event):void
		{
			// Save Kongregate API reference
			kongregate = event.target.content;
		   
			// Connect to the back-end
			kongregate.services.connect();
		  }      
		
		private function frameUpdate (e : Event) : void {
			if (!_p && $mode == "Menu") {
				begin();
				_p = true;
			}
			if ($mode == "Game") {
				if ($level == 1) {
					if (_i < dat1.length) {
						if (getTimer() - startRecord + 1333 > dat1[_i]) {
							newHazard()
						}
					} else {
						$mode = "Wait";
						var t1 : Timer = new Timer(2000, 1);
						t1.addEventListener(TimerEvent.TIMER, complTim);
						t1.start();
					}
				}
				if ($level == 2) {
					if (_i < dat2.length) {
						if (getTimer() - startRecord + 0 > dat2[_i]) {
							newHazard()
						}
					} else {
						$mode = "Wait";
						var t2 : Timer = new Timer(2000, 1);
						t2.addEventListener(TimerEvent.TIMER, complTim);
						t2.start();
					}
				}
				if ($level == 3) {
					if (_i < dat3.length) {
						if (getTimer() - startRecord + 0 > dat3[_i]) {
							newHazard()
						}
					} else {
						$mode = "Wait";
						var t3 : Timer = new Timer(2000, 1);
						t3.addEventListener(TimerEvent.TIMER, complTim);
						t3.start();
					}
				}
				if ($level == 4) {
					if (_i < dat4.length) {
						if (getTimer() - startRecord + 0 > dat4[_i]) {
							newHazard()
						}
					} else {
						$mode = "Wait";
						var t4 : Timer = new Timer(2000, 1);
						t4.addEventListener(TimerEvent.TIMER, complTim);
						t4.start();
					}
				}
			} else {
				_i = 0;
			}
		}
		
		private function newHazard() : void {
			_i++;
			_h = new Hazard($level);
			addChild(_h);
			hazardManager.hazards.push(_h);
		}
		
		private function levelCompleted(l : uint) : void {
			// doSomething();
			if (completedLevels.indexOf(l) == -1) {
				completedLevels.push(l);
				kongregate.stats.submit("DifferentLevelsCompleted", completedLevels.length);
			}
			kongregate.stats.submit("TotalLevelsCompleted", 1);
			switch(l) {
				case 1:
					kongregate.stats.submit("Level1Completed", 1);
					_saving.data.first = true;
					break;
				case 2:
					kongregate.stats.submit("Level2Completed", 1);
					_saving.data.second = true;
					break;
				case 3:
					kongregate.stats.submit("Level3Completed", 1);
					_saving.data.third = true;
					break;
				case 4:
					kongregate.stats.submit("Level4Completed", 1);
					_saving.data.fourth = true;
					break;
			}
			// immediately save
			_saving.flush();
			
			// music
			channel.stop();
			channel = menusong.play();
			channel.addEventListener(Event.SOUND_COMPLETE, replay);
			$mode = "Menu";
			Player.$alive = true;
		}
		
		private function complTim (e : TimerEvent) : void {
			levelCompleted($level);
		}
		
		private function timerAction (e : TimerEvent) : void {
			if (Player.$alive == false) {
				kongregate.stats.submit("Deaths", 1);
				_saving.data.deaths += 1;
				_saving.flush();
				channel.stop();
				channel = menusong.play();
				channel.addEventListener(Event.SOUND_COMPLETE, replay);
				$mode = "Menu";
				Player.$alive = true;
			}
			if ($mode == "Menu") {
				if (MenuLogic.$xVel == 0) {
					_h = new Hazard($level);
					addChild(_h);
					hazardManager.hazards.push(_h);
				}
			}
			_time = new Timer((Math.random() * 1) * 1000, 1);
			_time.addEventListener(TimerEvent.TIMER, timerAction);
			_time.start();
		}
		
		public function playLevel (level : uint) : void {
			if (1 == 1) {
				hazardManager.cleanAll();
				channel.stop();
				_i = 0;
				switch (level) {
					case 1:
						channel = l1song.play();
						break;
					case 2:
						channel = l2song.play();
						break;
					case 3:
						channel = l3song.play();
						break;
					case 4:
						channel = l4song.play();
						break;
					default:
						break;
				}
				startRecord = getTimer();
			}
		}
		
		private function replay (e : Event) : void {
			channel.removeEventListener(Event.SOUND_COMPLETE, replay);
			if ($mode == "Menu") {
				channel.stop();
				channel = menusong.play();
				channel.addEventListener(Event.SOUND_COMPLETE, replay);
			}
		}
	}
}
